type TokenAmount = nat;
type Time = int;
type StakingRewards = 
 record {
   apr: float64;
   claimableRewards: TokenAmount;
   lastClaimedAt: opt Time;
   totalRewards: TokenAmount;
 };
type StakingPeriod = 
 variant {
   instant;
   locked180;
   locked30;
   locked365;
   locked90;
 };
type StakeId = nat;
type Stake = 
 record {
   amount: TokenAmount;
   id: StakeId;
   isActive: bool;
   rewards: TokenAmount;
   stakedAt: Time;
   staker: Principal;
   stakingPeriod: StakingPeriod;
   unlocksAt: opt Time;
 };
type Result_2 = 
 variant {
   err: text;
   ok;
 };
type Result_1 = 
 variant {
   err: text;
   ok: StakeId;
 };
type Result = 
 variant {
   err: text;
   ok: TokenAmount;
 };
type Principal = principal;
service : {
  claimRewards: (stakeId: StakeId) -> (Result);
  extendStakingPeriod: (stakeId: StakeId, newPeriod: StakingPeriod) ->
   (Result_2);
  getStake: (stakeId: StakeId) -> (opt Stake) query;
  getStakingRewards: (stakeId: StakeId) -> (opt StakingRewards) query;
  getStakingStats: () ->
   (record {
      activeStakes: nat;
      averageStakeAmount: float64;
      stakingPeriodDistribution: vec record {
                                       StakingPeriod;
                                       nat;
                                     };
      totalRewardsDistributed: TokenAmount;
      totalStakedAmount: TokenAmount;
      totalStakes: nat;
    }) query;
  getUserActiveStakes: (user: principal) -> (vec Stake) query;
  getUserStakes: (user: principal) -> (vec Stake) query;
  getUserStakingSummary: (user: principal) ->
   (record {
      activeStakes: nat;
      totalRewards: TokenAmount;
      totalStaked: TokenAmount;
      totalVotingPower: nat;
    }) query;
  setMaximumStakeAmount: (amount: TokenAmount) -> (Result_2);
  setMinimumStakeAmount: (amount: TokenAmount) -> (Result_2);
  setStakingEnabled: (enabled: bool) -> (Result_2);
  stake: (amount: TokenAmount, period: StakingPeriod) -> (Result_1);
  unstake: (stakeId: StakeId) -> (Result);
}
