type VoteChoice = 
 variant {
   abstain;
   against;
   inFavor;
 };
type TreasuryTransferProposal = 
 record {
   amount: TokenAmount;
   reason: text;
   recipient: Principal;
 };
type TokenAmount = nat;
type Time = int;
type Result_2 = 
 variant {
   err: text;
   ok: nat;
 };
type Result_1 = 
 variant {
   err: text;
   ok: ProposalId;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type ProposalType = 
 variant {
   membershipChange: MembershipChangeProposal;
   parameterChange: ParameterChangeProposal;
   textProposal: text;
   treasuryTransfer: TreasuryTransferProposal;
 };
type ProposalTemplate = 
 record {
   category: text;
   description: text;
   id: nat;
   name: text;
   requiredFields: vec text;
   template: text;
 };
type ProposalStatus = 
 variant {
   active;
   cancelled;
   executed;
   failed;
   pending;
   succeeded;
 };
type ProposalId = nat;
type ProposalCategory = 
 record {
   color: text;
   description: text;
   id: text;
   name: text;
 };
type Proposal = 
 record {
   approvalThreshold: nat;
   createdAt: Time;
   description: text;
   executionDeadline: opt Time;
   id: ProposalId;
   proposalType: ProposalType;
   proposer: Principal;
   quorumThreshold: nat;
   status: ProposalStatus;
   title: text;
   totalVotingPower: nat;
   votesAgainst: nat;
   votesInFavor: nat;
   votingDeadline: Time;
 };
type Principal = principal;
type ParameterChangeProposal = 
 record {
   newValue: text;
   oldValue: text;
   parameter: text;
 };
type MembershipChangeProposal = 
 record {
   action: variant {
             add;
             remove;
           };
   member: Principal;
   role: text;
 };
service : {
  addCategory: (id: text, name: text, description: text, color: text) ->
   (Result);
  addTemplate: (name: text, description: text, category: text,
   requiredFields: vec text, template: text) -> (Result_2);
  batchVote: (votes: vec record {
                           ProposalId;
                           VoteChoice;
                           opt text;
                         }) -> (vec Result);
  createProposal: (title: text, description: text, proposalType:
   ProposalType, category: opt text, votingPeriod: opt nat) -> (Result_1);
  createProposalFromTemplate: (templateId: nat, title: text, parameters:
   vec record {
         text;
         text;
       }, votingPeriod: opt nat) -> (Result_1);
  getAllProposals: () -> (vec Proposal) query;
  getProposal: (proposalId: ProposalId) -> (opt Proposal) query;
  getProposalCategories: () -> (vec ProposalCategory) query;
  getProposalStats: () ->
   (record {
      activeProposals: nat;
      failedProposals: nat;
      succeededProposals: nat;
      totalCategories: nat;
      totalProposals: nat;
      totalTemplates: nat;
      totalVotes: nat;
    }) query;
  getProposalTemplates: () -> (vec ProposalTemplate) query;
  getProposalsByCategory: (category: text) -> (vec Proposal) query;
  getTemplate: (templateId: nat) -> (opt ProposalTemplate) query;
  getTemplatesByCategory: (category: text) -> (vec ProposalTemplate) query;
  getTrendingProposals: (limit: nat) -> (vec Proposal) query;
  init: (stakingId: principal) -> () oneway;
  vote: (proposalId: ProposalId, choice: VoteChoice, reason: opt text) ->
   (Result);
}
